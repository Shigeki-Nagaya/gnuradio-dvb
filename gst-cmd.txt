Gstreamer commands to use with the simple DVB TX/RX. For more tips and tricks see http://wiki.oz9aec.net/index.php/Gstreamer_Cheat_Sheet

Note: video1.ts and video2.ts are named pipes created using the "mkfifo" command.

1. Launch a video test source encoded to H.264/MPEG-TS and send it to a named pipe called video1.ts:
gst-launch -e videotestsrc ! video/x-raw-yuv, framerate=25/1, width=640, height=360 ! x264enc bitrate=1024 ! mpegtsmux ! filesink location=video1.ts

2. Same as above but adds some nice text overlay:
gst-launch -e videotestsrc ! video/x-raw-yuv, framerate=25/1, width=640, height=360 ! timeoverlay halign=left valign=bottom shaded-background=true ! textoverlay text="Test Video 640x360 25fps" halign=center valign=top shaded-background=true ! x264enc bitrate=1000 ! mpegtsmux ! filesink location=video1.ts

3. Same as above but uses webcam instead of videotestsrc:
gst-launch -e -v v4l2src device="/dev/video1" ! video/x-raw-yuv, framerate=25/1, width=640, height=360 ! timeoverlay halign=right valign=bottom shaded-background=true ! textoverlay text="Test Video 640x360 25fps" halign=left valign=bottom shaded-background=true ! x264enc bitrate=1000 ! mpegtsmux ! filesink location=video1.ts

On the receiver side you can simply run mplayer:
mplayer video2.ts

A Gstreamer based player would look something like this:
gst-launch -v playbin uri=file:///path/to/video2.ts
Unfortunately this does not work with the current setup. I suspect it is due to the mixed CBR/VBR in the setup.


We could also add a local monitor on the TX side; however, this doesn't work either (also due to VBR/CBR mess):
gst-launch -e -v videotestsrc ! video/x-raw-yuv, framerate=25/1, width=640, height=360 ! timeoverlay halign=left valign=bottom shaded-background=true ! textoverlay text="Test Video 640x360 25fps" halign=center valign=top shaded-background=true tee name="splitter" ! queue ! xvimagesink sync=false splitter. ! queue ! x264enc bitrate=1000 ! mpegtsmux ! filesink location=video1.ts


Alex
OZ9AEC
